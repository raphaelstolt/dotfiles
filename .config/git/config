[user]
    name = Name Surname
    email = name.surname@gmail.com
[color]
    ui = auto
    diff = auto
    log = auto
    status = auto
    branch = auto
    interactive = auto
[help]
    autocorrect = 1
[alias]
    pl = pull --rebase
    df = diff
    ci = commit
    rci = "!git commend && git please"
    co = checkout
    cob = checkout -b
    st = status
    shorty = status --short --branch
    please = push --force-with-lease
    it = "!git init && git commit -m \"Initial commit\" --allow-empty"
    ap = add -p
    br = branch
    brs = branch -a --color -v
    # Delete a branch only if it has been merged
    bd = branch -d
    # Force delete of a branch
    bD = branch -D
    pb = push origin HEAD
    # Remove all merged branches
    bdm = "!git branch --merged | grep -v \"master\" | grep -v \"^*\" | xargs git branch -d"
    up = push origin
    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
    amend = commit --amend -C HEAD
    commend = commit --amend --no-edit
    packdiff = diff --name-only --diff-filter=RAMC
    ln = log --oneline -n
    pl = log --pretty='format:%C(3)[%h] %Cgreen%an%Creset%n %cd %s %Cred%d%Creset' --graph
    sshow = "!f() { git stash show stash^{/$*} -p; }; f"
    sapply = "!f() { git stash apply stash^{/$*}; }; f"
    egc = !"git config --$1 -e"
    # git cot <tag>
    cot = rev-list -n 1
    lastchange = 'log -p --follow -n 1'
    fixlock = ! git reset HEAD -- composer.lock && git co -- composer.lock && composer update --no-scripts && git add composer.lock
    # assumes diff-so-fancy (https://github.com/so-fancy/diff-so-fancy) is installed
    dsf = "!f() { [ -z \"$GIT_PREFIX\" ] || cd \"$GIT_PREFIX\" && git diff --color \"$@\" | diff-so-fancy  | less --tabs=4 -RFX; }; f"
    # Show defined aliases
    ls-aliases = "!git config --get-regexp '^alias\\.' | colrm 1 6 | sed 's/ / = /'"
    # Show defined aliases alternative
    ls-a = "!git var -l | grep -e '^alias'"
    rebase-branch = !"git rebase --interactive `git merge-base master HEAD`"
    log-standup = !"git log --since yesterday --author $(git config user.email) --pretty=short"

    undo-commit = reset --soft HEAD~1
    unstage = reset HEAD

    wip = !"git add --all; git ls-files --deleted -z | xargs -0 git rm; git commit --message=wip"
    unwip = !"git log -n 1 | grep -q -c wip && git reset HEAD~1"

    # Hashes since commit hash
    # Usage git hsc <commit-hash>
    hsc = !"git rev-list $1^..HEAD"

    sync-fork-master = !"git checkout master; git fetch upstream; git merge upstream/master; git push origin HEAD"
    rfb = !"git add -u && git commend && git push origin HEAD --force-with-lease"

    rbc = !"git add . && git commend"

    tag-history = !"git log --date-order --tags --simplify-by-decoration --pretty=format:'%ai %h %d'"
[core]
    excludesfile = .gitignore
    whitespace = cr-at-eol
[filter "media"]
    clean = git-media-clean %f
    smudge = git-media-smudge %f
[filter "hawser"]
    clean = git hawser clean %f
    smudge = git hawser smudge %f
    required = true
[credential]
    helper = osxkeychain
[includeIf "gitdir:~/Work/git-repos/"]
    path = .oss-gitconfig
